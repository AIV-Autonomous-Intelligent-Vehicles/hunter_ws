import PythonQt
import paraview.simple as smp

# source: https://github.com/Jorgen-VikingGod/Qt-Frameless-Window-DarkStyle
def setDarkPalette():
    # the code of this function is subject to the following license:
    # --------------------------------------------------------------------------
    # The MIT License

    # Copyright (c) 2018, Juergen Skrotzky (https://github.com/Jorgen-VikingGod, JorgenVikingGod@gmail.com)

    # Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    # The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    # --------------------------------------------------------------------------

    qApp = PythonQt.QtGui.QApplication.instance()
    
    # not sure this is needed:
    qApp.setStyle(PythonQt.QtGui.QStyleFactory.create("Fusion"))

    QPalette = PythonQt.QtGui.QPalette
    QColor = PythonQt.QtGui.QColor
    white = PythonQt.QtCore.Qt.white
    red = PythonQt.QtCore.Qt.red
    darkPalette = QPalette()
    darkPalette.setColor(QPalette.Window, QColor(53, 53, 53))
    darkPalette.setColor(QPalette.WindowText, white)
    darkPalette.setColor(QPalette.Disabled, QPalette.WindowText, QColor(127, 127, 127))
    darkPalette.setColor(QPalette.Base, QColor(42, 42, 42))
    darkPalette.setColor(QPalette.AlternateBase, QColor(66, 66, 66))
    darkPalette.setColor(QPalette.ToolTipBase, white)
    darkPalette.setColor(QPalette.ToolTipText, QColor(53, 53, 53))
    darkPalette.setColor(QPalette.Text, white)
    darkPalette.setColor(QPalette.Disabled, QPalette.Text, QColor(127, 127, 127))
    darkPalette.setColor(QPalette.Dark, QColor(35, 35, 35))
    darkPalette.setColor(QPalette.Shadow, QColor(20, 20, 20))
    darkPalette.setColor(QPalette.Button, QColor(53, 53, 53))
    darkPalette.setColor(QPalette.ButtonText, white)
    darkPalette.setColor(QPalette.Disabled, QPalette.ButtonText, QColor(127, 127, 127))
    darkPalette.setColor(QPalette.BrightText, red)
    darkPalette.setColor(QPalette.Link, QColor(42, 130, 218))
    darkPalette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    darkPalette.setColor(QPalette.Disabled, QPalette.Highlight, QColor(80, 80, 80))
    darkPalette.setColor(QPalette.HighlightedText, white)
    darkPalette.setColor(QPalette.Disabled, QPalette.HighlightedText, QColor(127, 127, 127))
    qApp.setPalette(darkPalette)

    styleSheet = qApp.styleSheet + """
    QToolTip {
        color: #ffffff;
        background-color: #2a82da;
        border: 1px solid white;
    }

    QMenu::item:disabled {
        background-color:rgba(35,35,35,127);
        color:palette(disabled);
    }

    pqPythonShell QTextEdit {
        background-color: #ffffff;
    }

    QScrollArea {
        background: transparent;
    }

    QScrollArea > QWidget > QWidget {
        background: transparent;
    }

    QScrollArea > QWidget > QScrollBar {
        background: palette(base);
    }
    """

    qApp.setStyleSheet(qApp.styleSheet + styleSheet)

# This function will have an effect only on the first run of the software.
# i.e. if the toolbar positions are changed by the user, they will be memorized
# inside the application settings (on Linux, inside ~/.config/VENDOR_NAME)
# and they will be restored on the following executions of the software.
# The current button to reset the settings does not reset the toolbar positions.
def applyDefaultToolbarSetup(window):
    toolbar = window.findChild('QToolBar', 'toolBar')
    window.removeToolBar(toolbar)
    window.addToolBar(PythonQt.QtCore.Qt.LeftToolBarArea, toolbar)
    toolbar.show()

    viewToolbar = window.findChild('QToolBar', 'viewSettings')
    window.removeToolBar(viewToolbar)
    window.addToolBar(PythonQt.QtCore.Qt.BottomToolBarArea, viewToolbar)
    viewToolbar.show()

    vcrToolbar = window.findChild('QToolBar', 'Player Control')
    window.removeToolBar(vcrToolbar)
    window.addToolBar(PythonQt.QtCore.Qt.BottomToolBarArea, vcrToolbar)
    vcrToolbar.show()

    colorToolbar = window.findChild('QToolBar', 'colorToolBar')
    window.removeToolBar(colorToolbar)
    window.addToolBar(PythonQt.QtCore.Qt.BottomToolBarArea, colorToolbar)
    colorToolbar.show()

    cameraToolbar = window.findChild('QToolBar', 'cameraToolbar')
    window.removeToolBar(cameraToolbar)
    window.addToolBar(PythonQt.QtCore.Qt.LeftToolBarArea, cameraToolbar)
    cameraToolbar.show()

    axesToolbar = window.findChild('QToolBar', 'axesToolbar')
    window.removeToolBar(axesToolbar)
    window.addToolBar(PythonQt.QtCore.Qt.LeftToolBarArea, axesToolbar)
    axesToolbar.show()

    macrosToolbar = window.findChild('QToolBar', 'MacrosToolbar')
    window.removeToolBar(macrosToolbar)
    window.addToolBar(PythonQt.QtCore.Qt.BottomToolBarArea, macrosToolbar)
    macrosToolbar.hide()


def setColorTransferFunction():

    LUTRGBPoints = [
                      1.0,              0.26700400000000002,  0.0048739999999999999, 0.32941500000000001,
                      5181.22802734375, 0.20306299999999999,  0.379716,              0.553925,
                      14308.296875,     0.144759,             0.51909300000000003,   0.55657199999999996,
                      29848.982421875,  0.11951199999999999,  0.607464,              0.54021799999999998,
                      29848.982421875,  0.11948300000000001,  0.61481699999999995,   0.53769199999999995,
                      41113.921875,     0.20221900000000001,  0.71527200000000002,   0.47608400000000001,
                      55996.80078125,   0.98386799999999996,  0.90486699999999998,   0.13689699999999999,
                      65535.0,          0.99607843137254903,  0.65098039215686299,   0.090196078431372506
                   ]

    intensityLUT = smp.GetColorTransferFunction(
        'Signal Photons',
        ColorSpace='Diverging',
        RGBPoints=LUTRGBPoints)

    reflectivityLUT = smp.GetColorTransferFunction(
        'Reflectivity',
        ColorSpace='Diverging',
        RGBPoints=LUTRGBPoints)

    rangeLUT = smp.GetColorTransferFunction('Range')
    # tresholding distance to 50 meters
    rangeLUT.RescaleTransferFunction(0.1, 50000.0) # range is in millimeters
    rangeLUT.ApplyPreset('Viridis (matplotlib)', True)
    rangeLUT.UseLogScale = True

    # Set color scale
    imageScalarsLUT = smp.GetColorTransferFunction('ImageScalars')
    imageScalarsLUT.RescaleTransferFunction(0.0, 255.0)
    imageScalarsLUT.ApplyPreset('Viridis (matplotlib)', True)
